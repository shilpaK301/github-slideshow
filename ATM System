package ATM_project;
import java.io.IOException;
public class ATM extends Options{

	public static void main(String[] args) throws  Exception{
		Options option= new Options();
		
		option.getLogin();
	}

}
package ATM_project;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Scanner;
public class Account {
	Scanner input= new Scanner(System.in);
	DecimalFormat moneyFormat= new DecimalFormat("'$'###,##0.00");
	
	private int customerNumber;
	private int pinNumber;
	private double checkingBalance = 0 ;
	private double savingBalance = 0 ;
	public int getCustomerNumber() {
		return customerNumber;
	}
	public void setCustomerNumber(int customerNumber) {
		this.customerNumber = customerNumber;
	}
	public int getPinNumber() {
		return pinNumber;
	}
	public void setPinNumber(int pinNumber) {
		this.pinNumber = pinNumber;
	}
	public double getCheckingBalance() {
		return checkingBalance;
	}
	public void setCheckingBalance(double checkingBalance) {
		this.checkingBalance = checkingBalance;
	}
	public double getSavingBalance() {
		return savingBalance;
	}
	public void setSavingBalance(double savingbalance) {
		this.savingBalance = savingbalance;
	}
	 
	public double calcCheckingWithdraw(double amount){
		checkingBalance= checkingBalance - amount;
		return checkingBalance;
	}
	public double calcSavingWithdraw(double amount){
		savingBalance= savingBalance - amount;
		return savingBalance;
	}
	public double calCheckingDeposit(double amount) {
		checkingBalance= checkingBalance + amount;
		return checkingBalance;
	}
	public double calcSavingDeposit(double amount){
		savingBalance= savingBalance +  amount;
		return savingBalance;
	}
	public void getCheckingWithdrawInput(){
		System.out.println("Checking Account balance: "+ moneyFormat.format(checkingBalance));
		System.out.println("Amount You want to withdraw from Checking account : ");
		double amount = input.nextDouble();
		
		if( checkingBalance -amount >= 0 ){
			calcCheckingWithdraw(amount);
			System.out.println("New checking Account Balance : "+ moneyFormat.format(checkingBalance));
			
		}else{
			System.err.println("Balance cannot be negative");
			
		}
	}
	public void getSavingWithdrawInput(){
		System.out.println("Saving Account balance: "+ moneyFormat.format(savingBalance));
		System.out.println("Amount You want to withdraw from Saving account : ");
		double amount = input.nextDouble();
		
		if( savingBalance -amount >= 0 ){
			calcSavingWithdraw(amount);
			System.out.println("New Saving Account Balance : "+ savingBalance + "\n");
			
		}else{
			System.err.println("Balance cannot be negative");
			
		}
	}
	public void getCheckingDepositInput(){
		System.out.println("Checking Account balance: "+ moneyFormat.format(checkingBalance));
		System.out.println("Amount You want to Deposit from Checking account : ");
		double amount = input.nextDouble();
		
		if( checkingBalance +amount >= 0 ){
			calCheckingDeposit(amount);
			System.out.println("New checking Account Balance : "+ moneyFormat.format(checkingBalance));
			
		}else{
			System.err.println("Balance cannot be negative");
			
		}
	}
	public void getSavingDepositInput(){
		System.out.println("Saving Account balance: "+ moneyFormat.format(savingBalance));
		System.out.println("Amount You want to deposit from Saving account : ");
		double amount = input.nextDouble();
		
		if( savingBalance +amount >= 0 ){
			calcSavingDeposit(amount);
			System.out.println("New Saving Account Balance : "+ savingBalance + "\n");
			
		}else{
			System.err.println("Balance cannot be negative");
			
		}
	}
	
}
package ATM_project;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;
import java.util.Map;
public class Options extends Account{
	Scanner menueInput= new Scanner(System.in);
	DecimalFormat moneyFormat= new DecimalFormat("'$'###,##0.00");
	HashMap<Integer, Integer> data = new HashMap<Integer, Integer>();
	
	public void getLogin() throws IOException{
		int x=1;
		do{
			try{
				data.put(985764, 7854);
				data.put(887575, 1234);
				data.put(892575, 3409);
				data.put(758925, 5674);
				System.out.println("Welcome to ATM Project");
				
				System.out.println("Enter your Customer Number : ");
				setCustomerNumber(menueInput.nextInt());
				
				System.out.println("Enter Your PIN : ");
				setPinNumber(menueInput.nextInt());
			}catch (Exception e){
				System.out.println("\n"+ "Invalid Character(s). Only number(s)." + "\n");
				x=2;
			}
			for(Map.Entry<Integer, Integer> entry : data.entrySet()){
				if(entry.getKey()== getCustomerNumber() && entry.getValue()== getPinNumber()){
					getAccountType();
				}
			}
			System.out.println("\n" +"Wrong Customer Number or PIN "+ "\n");
		}while(x==1);
	}
	public void getAccountType(){
		System.out.println("Select the account you want to access : ");
		System.out.println("Type 1 : Checking Account");
		System.out.println("Type 2 : Saving Account");
		System.out.println("Type 3 : Exit");
		System.out.println("Choice :");
		selection = menueInput.nextInt();
		
		switch(selection)	{
		case 1 : getChecking();
			break;
		case 2 : getSaving();
		break;
		case 3 : System.out.println(" Thank you for using this ATM bye.");
		break;
		default : System.out.println("\n" + "Invalid Input" + "\n");
			getAccountType();
		}
	}
	public void getChecking(){
		System.out.println("Checking Account: ");
		System.out.println("Type 1 : View Balance");
		System.out.println("Type 2 : withdrow Funds");
		System.out.println("Type 3 : Deposit Funds");
		System.out.println("Type 4 : Exit");
		System.out.println("Choice : ");
		
		selection = menueInput.nextInt();
		switch (selection) {
		case 1 : System.out.println("Checking Account balance: "+ moneyFormat.format(getCheckingBalance()));
				getAccountType();
				break;
		case 2 : getCheckingWithdrawInput();
				getAccountType();
				break;
		case 3 : getCheckingDepositInput();
				getAccountType();
				break;
		case 4 : System.out.println(" Thank you for using this ATM bye.");
				break;
		default : System.out.println("\n" + "Invalid Input" + "\n");
				getChecking();
	}
	}
	public void getSaving() {
		System.out.println("Saving Account: ");
		System.out.println("Type 1 : View Balance");
		System.out.println("Type 2 : withdrow Funds");
		System.out.println("Type 3 : Deposit Funds");
		System.out.println("Type 4 : Exit");
		System.out.println("Choice : ");
		
		selection = menueInput.nextInt();
		switch (selection) {
		case 1 : System.out.println(" Saving Account balance: "+ moneyFormat.format(getSavingBalance()));
				getAccountType();
				break;
		case 2 : getSavingWithdrawInput();
				getAccountType();
				break;
		case 3 : getSavingDepositInput();
				getAccountType();
				break;
		case 4 : System.out.println(" Thank you for using this ATM bye.");
				break;
		default : System.out.println("\n" + "Invalid Input" + "\n");
				getSaving();
		}
	}
	int selection;
}
